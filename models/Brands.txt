const mongoose = require('mongoose');

const BrandSchema = new mongoose.Schema({
    brandName: { type: String, unique: true },
    brandImage: { type: String },
    categoryType: [String],
    series: {
        type: mongoose.Schema.Types.Mixed,
        required: true,
    }
});

const BrandModel = mongoose.model('Brand', BrandSchema);

module.exports = BrandModel;



app.post("/add-brand", async (req, res) => {
    try {
        const brand = await BrandModel.create(req.body);
        res.status(201).json({ message: 'Brand Added Successfully' })
    } catch (error) {
        if (error.code === 11000 && error.keyPattern && error.keyPattern.brandName) {
            res.status(400).json({ error: 'Brand already exists' })
        } else {
            res.status(500).json({ error: "Internal Server error" })
        }
    }
})



app.get('/brands-by-category/:categoryType', async (req, res) => {
    try {
        const categoryType = req.params.categoryType.toLowerCase(); // Ensure case-insensitive comparison

        // Find brands where the category_type array contains the specified categoryType
        const brands = await BrandModel.find({ category_type: categoryType }, 'brandName brandImage');

        res.json(brands);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
})


app.get('/get-brand-names', async (req, res) => {
    try {
        const brands = await BrandModel.find({}, 'brandName brandImage');
        res.json(brands);
    } catch (error) {
        res.status(500).json({ error: "Internal Server error" });
    }
});

app.put("/edit-brand/:id", async (req, res) => {
    try {
        const brand = await BrandModel.findByIdAndUpdate(req.params.id, req.body, { new: true });
        if (!brand) {
            return res.status(404).json({ error: 'Brand not found' });
        }
        res.json({ message: 'Brand edited Successfully' });
    } catch (error) {
        res.status(400).json({ error: "Internal Server error" });
    }
})

app.delete('/delete-brand/:id', async (req, res) => {
    try {
        const brand = await BrandModel.findByIdAndDelete(req.params.id);
        if (!brand) {
            return res.status(404).json({ error: 'Brand not found' });
        }
        res.json({ message: 'Brand deleted successfully' });
    } catch (error) {
        res.status(500).json({ error: "Internal Server Error" });
    }
});

// Fetch details of a single brand by ID
app.get('/brands/:id', async (req, res) => {
    try {
        const brand = await BrandModel.findById(req.params.id);
        if (!brand) {
            return res.status(404).json({ error: 'Brand not found' });
        }
        res.json(brand);
    } catch (error) {
        res.status(500).json({ error: "Internal Server Error" });
    }
});

// Fetch all brands
app.get('/fetch-all-brands', async (req, res) => {
    try {
        const brands = await BrandModel.find();
        res.json(brands);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});


