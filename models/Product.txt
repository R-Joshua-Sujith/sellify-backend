const mongoose = require('mongoose');

const optionSchema = new mongoose.Schema({
    id: Number,
    heading: String,
    value: String,
});

const variantSchema = new mongoose.Schema({
    id: Number,
    name: String,
    options: [optionSchema],
});

const ProductSchema = new mongoose.Schema({
    productImage: { type: String },
    productName: { type: String, unique: true },
    basePrice: { type: Number, required: true },
    variants: [variantSchema],
    brandName: { type: String },
    seriesName: { type: String },
    categoryType: { type: String },
    attributes: {
        type: mongoose.Schema.Types.Mixed,
        required: true,
    },
    sections: {
        type: mongoose.Schema.Types.Mixed,
        required: true,
    }
});

const ProductModel = mongoose.model('Product', ProductSchema);

module.exports = ProductModel;



app.post('/create-products', async (req, res) => {
    try {
        const { productImage, productName, basePrice, variants, brandName, seriesName, categoryType, attributes, sections } = req.body;
        const newProduct = new ProductModel({ productImage, productName, basePrice, variants, brandName, seriesName, categoryType, attributes, sections });
        const savedProduct = await newProduct.save();
        res.json(savedProduct);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// Fetch all products based on a brand
app.get('/products/:type/:brand', async (req, res) => {
    try {
        const brand = req.params.brand;
        const product_type = req.params.type;

        // Assuming "ProductModel" has a field called "type"
        const products = await ProductModel.find({ brand, product_type });

        res.json(products);
    } catch (error) {
        res.status(500).json({ error: 'Internal Server Error' });
    }
});

app.get('/products/:productId', async (req, res) => {
    try {
        const productId = req.params.productId;

        // Validate that the provided ID is a valid MongoDB ObjectId
        if (!mongoose.Types.ObjectId.isValid(productId)) {
            return res.status(400).json({ error: 'Invalid product ID' });
        }

        const product = await ProductModel.findById(productId);

        if (!product) {
            return res.status(404).json({ error: 'Product not found' });
        }

        res.json(product);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});
